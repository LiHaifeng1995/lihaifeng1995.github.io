{"meta":{"title":"随手小记","subtitle":null,"description":null,"author":"李海峰","url":"http://yoursite.com"},"pages":[{"title":"分类","date":"2018-05-26T12:41:54.327Z","updated":"2018-05-26T12:41:54.327Z","comments":false,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"标签","date":"2018-05-27T11:57:06.094Z","updated":"2018-05-26T12:42:45.839Z","comments":false,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"视频监控领域无插件播放完整解决方案","slug":"视频监控领域无插件播放完整解决方案","date":"2018-06-07T14:37:46.000Z","updated":"2018-06-07T14:38:28.113Z","comments":true,"path":"2018/06/07/视频监控领域无插件播放完整解决方案/","link":"","permalink":"http://yoursite.com/2018/06/07/视频监控领域无插件播放完整解决方案/","excerpt":"","text":"天坑二号 待补坑。。。。。","categories":[{"name":"Javascript","slug":"Javascript","permalink":"http://yoursite.com/categories/Javascript/"},{"name":"直播","slug":"Javascript/直播","permalink":"http://yoursite.com/categories/Javascript/直播/"}],"tags":[{"name":"H5直播","slug":"H5直播","permalink":"http://yoursite.com/tags/H5直播/"},{"name":"低延时","slug":"低延时","permalink":"http://yoursite.com/tags/低延时/"},{"name":"H264","slug":"H264","permalink":"http://yoursite.com/tags/H264/"},{"name":"视频","slug":"视频","permalink":"http://yoursite.com/tags/视频/"},{"name":"高清","slug":"高清","permalink":"http://yoursite.com/tags/高清/"}]},{"title":"MSE直播方案调优","slug":"MSE直播方案调优","date":"2018-06-07T14:23:27.000Z","updated":"2018-06-07T14:38:29.024Z","comments":true,"path":"2018/06/07/MSE直播方案调优/","link":"","permalink":"http://yoursite.com/2018/06/07/MSE直播方案调优/","excerpt":"","text":"天坑一号 此篇主要介绍博主在开发基于MSE方案的直播项目中，进行的策略优化。","categories":[{"name":"Javascript","slug":"Javascript","permalink":"http://yoursite.com/categories/Javascript/"},{"name":"直播","slug":"Javascript/直播","permalink":"http://yoursite.com/categories/Javascript/直播/"}],"tags":[{"name":"H5直播","slug":"H5直播","permalink":"http://yoursite.com/tags/H5直播/"},{"name":"低延时","slug":"低延时","permalink":"http://yoursite.com/tags/低延时/"},{"name":"H264","slug":"H264","permalink":"http://yoursite.com/tags/H264/"},{"name":"视频","slug":"视频","permalink":"http://yoursite.com/tags/视频/"},{"name":"高清","slug":"高清","permalink":"http://yoursite.com/tags/高清/"}]},{"title":"H5低延时直播方案","slug":"H5低延时直播方案","date":"2018-05-28T15:26:34.000Z","updated":"2018-05-29T14:19:14.296Z","comments":true,"path":"2018/05/28/H5低延时直播方案/","link":"","permalink":"http://yoursite.com/2018/05/28/H5低延时直播方案/","excerpt":"本文主要比较几种常用的直播方案，以及笔者在项目开发中使用过的方案，具体细节不做分析。","text":"本文主要比较几种常用的直播方案，以及笔者在项目开发中使用过的方案，具体细节不做分析。当前，直播方案有如下几种： HLS HTTP Live Streaming（简称 HLS）是一个基于 HTTP 的视频流协议，由 Apple 公司实现。其采用将视频切片的方式，将编码好的TS文件切成等长的ts文件。在刚开始拉流时，需要缓存至少3个ts文件，每个ts文件长2s，因此，会产生6s以上的延时。 HLS有以下优缺点： 移动端支持良好，IOS、Android都支持HLS, 常用的QuickTime VLC等播放器也对HLS有良好的支持性。 PC端浏览器支持情况不佳。 延时较大，仅支持要求实时性不高的场景。 不支持H265 RTMPRTMP是Adobe公司开发的一套视频直播协议，基于flash，因此，无法在ios的浏览器中使用,但是其实时性较好，延时可以低至两秒。 下面是HLS和RTMP协议的对比： 如上两种方案已支持大部分的使用场景，但是，在对实时性要求更高的应用场景，例如，视频监控等，上面两种协议也不能够满足使用要求。下面介绍两种延时更低的方案： RTSP RTSP（实时流协议，Real Time Streaming Protocol）是由Real Network和Netscape共同提出的如何有效地在IP网络上传输流媒体数据的应用层协议。RTSP对流媒体提供了诸如暂停，快进等控制，而它本身并不传输数据，RTSP的作用相当于流媒体服务器的远程控制。 基于RTSP协议，我们可以使用RTP（实时传输协议，Real-time Transport Protocol）来进行流媒体数据的传输，RTP协议具有极低的延时性。在浏览器收到RTP数据包后，视频解析阶段我们可以采用如下两种方案： FFMPEG + WEBGLFFmpeg是一套开源程序，它提供了录制、转换以及流化音视频的完整解决方案。我们可以使用asm或者wasm将FFmpeg转为可在浏览器执行的解码库，通过FFMpeg将经由RTP协议传输的视频数据转码，并通过WEBGL绘制。 使用此种方案有以下优缺点： 在解码能力足够时，播放延时极低，实测可在0.3s以内。 FFMpeg在浏览器端解码，软解极耗性能，1080P下，只能到10帧左右。 asm支持情况较为完善，wasm要在极新版本的浏览器才支持（具体版本需测试） 解码后的数据对开发者来说不再是黑盒，为对视频进行进一步处理提供了便利。 支持H.265解码！目前，基于浏览器直接支持解码的各种方案都不支持H.265解码。 MSEMedia Source Extensions（媒体源扩展）提供了实现无插件且基于 Web 的流媒体的功能。使用 MSE，媒体串流能够通过 JavaScript 创建，并且能通过使用 &lt;audio&gt; 和 &lt;video&gt; 元素进行播放。 在通过拿到RTP包后，我们可以将其组装成fMP4，并喂到video中播放。 使用这种方案，可以解决FFMpeg软解性能不足的问题，实现高分辨率下的流畅播放，在实时性上略差，延时可以控制在1s左右。","categories":[{"name":"Javascript","slug":"Javascript","permalink":"http://yoursite.com/categories/Javascript/"}],"tags":[{"name":"H5直播","slug":"H5直播","permalink":"http://yoursite.com/tags/H5直播/"},{"name":"低延时","slug":"低延时","permalink":"http://yoursite.com/tags/低延时/"},{"name":"H264","slug":"H264","permalink":"http://yoursite.com/tags/H264/"},{"name":"H265","slug":"H265","permalink":"http://yoursite.com/tags/H265/"},{"name":"视频","slug":"视频","permalink":"http://yoursite.com/tags/视频/"}]},{"title":"浅谈深拷贝和浅拷贝","slug":"浅谈深拷贝和浅拷贝","date":"2018-05-27T13:25:42.000Z","updated":"2018-05-29T14:19:53.548Z","comments":true,"path":"2018/05/27/浅谈深拷贝和浅拷贝/","link":"","permalink":"http://yoursite.com/2018/05/27/浅谈深拷贝和浅拷贝/","excerpt":"","text":"待补坑…….","categories":[],"tags":[]},{"title":"canvas标签width和style.width的区别","slug":"canvas标签width和style-width的区别","date":"2018-05-26T12:46:01.000Z","updated":"2018-05-29T13:45:58.677Z","comments":true,"path":"2018/05/26/canvas标签width和style-width的区别/","link":"","permalink":"http://yoursite.com/2018/05/26/canvas标签width和style-width的区别/","excerpt":"Canvas大小的修改有三种方法：","text":"Canvas大小的修改有三种方法：方法一： 通过CSS样式来控制canvas元素，具体代码如下： 1canvas &#123; width: 600px; height: 300px&#125; 方法二： 直接在canvas标签内定义width和height，具体代码如下： 1&lt;canvas width='600' height='300'&gt;&lt;/canvas&gt; 方法三： 在JS代码里面设置width和height， 在var ctx = myCanvas.getContext(&#39;2d&#39;) 后面追加如下代码： 12myCanvas.width = 600;myCanvas.height = 300; 设置canvas标签css的width属性，和直接设置canvas的width属性，结果是不一样的。原因如下： canvas标签包含元素本身以及元素绘图表面，它们各自有自己的尺寸大小。当直接设置canvas标签的width时，会同时改变元素本身的大小和元素绘图表面的大小，此时，显示效果不发生改变(只有等比例变化)；设置canvas css中width的属性时，只改变canvas本身的大小，而不改变元素绘图表面的大小，此时，元素绘图表面为适应canvas元素的尺寸，会进行拉伸或缩小，导致显示效果变化。 height 和 style.height 同理。 感谢 ‘https://www.cnblogs.com/regina1123/p/6234719.html&#39;","categories":[{"name":"html","slug":"html","permalink":"http://yoursite.com/categories/html/"}],"tags":[{"name":"html","slug":"html","permalink":"http://yoursite.com/tags/html/"},{"name":"css","slug":"css","permalink":"http://yoursite.com/tags/css/"}]}]}